Rest API - python in java https://www.codementor.io/sagaragarwal94/building-a-basic-restful-api-in-python-58k02xsiq

javascrip notes
<script> tag is like the beginning tag i guess?
var varName = 100;
document.write for printing. document.write("5+4",5+4,"<br />") or (hello+ "how are you")
Note that . document.write("5+4",5+4)
document.prompt("get me a value ", "<br />") >>> ROMPTING A VALUE FROM USER

any precison above 16 decimals gets rounded up..
var balance=2400
document.write("monthly balance", (balance /12 ).toFixed(2),"<br />")
math function to do all the calcs
Math.abs(-8)  you get 8
Math.Max(10,12) gives you 12

convert string to num
document.write(Converted string , string("3.14"),"<br />")
var string = "a long string" + "thats totally random" + "by rohit " ;
document.write("string length" , string.length,"<br />");
document.write("string length" , string.index0f("random"),"<br />") >> position of word in string.

document.write("string length" , string.slice(19,23),"<br />") >> slice the string.
document.write("string length" , string.charAt(19),"<br />") >> char at position
document.write("string length" , string.split(" "),"<br />") >> like our python split
document.write("string length" , string.toUpperCase(),"<br />") >> uppercase
	!= > >= all there like python , C++
	var age = 8;
	
	if (age > 6 ) and (age < 9){
		document.write("you should be in school","<br />") 

	}
	var1 === var2 means it compares value as well as type of the variable. Thats what popularly used.
document.write("\"5\" == 5", ( "5" == 5),"<br />") >> This will print true
document.write("\"5\" == 5", ( "5" === 5),"<br />") >> This will print false 

switch case

var age = 6;

switch (age){
	case 5 :
		document.write(" DONT goto KG play","<br />") >> uppercase
	
	case 6 :
		document.write(" goto KG","<br />") >> uppercase
	default :
		document.write(" none oof cases saatisfied",age,"<br />") >> uppercase
}

ternary operator( the ?, we have seen it from mingens code)
var age = 10;
(condition) ? ifTrue : ifFalse
	var CanIVote = ( age >= 18) ? true : false;
	
	looping
	
i=0
while ( i <= 10){
	document.write(" val of i"," , i++,<br />")
	}
	
for (j=0; j <= 20 ; j++){
	if ( j % 2) == 0 ){
		continue;
		}
	if ( j = 15 ) == 0 ){
		break;
		}
	document.write(" val of j"," , j,<br />")
	}
}

var customer = {name : "Bob", age : "12"}


####DATATYPES####

var tomsmith = ["tom","80 main st",32]
document.write(" val at 0"," , tomsmith[0],<br />") >> will print "tom"
tomsmith[3]="tsmith1@aol.com"
tomsmith.splice(2,1,"pittsburgh","PA");
tomsmith.join(" ,"),
tomsmith.sort(); >>> to sort;
tomsmith.length ; (length of tomsmith)
## Function in java , similar to python
function function_name(){

return true
}
## var2 is local to the function like other stuffs;
function mult_2(var)
	{
	var2=var * 2;
	return (var2)
	}


	you can store it instide a variable too
var var3 =	function mult_2(var)
	{
	var2=var * 2;
	return (var2)
	}

	process multiple argies to a function., like shell script
var var3 =	function mult_2()
	{
 if  arguments.lrngth > 0 {
	arguments [0];>> just random statements
	
	arguments [1]; >> just random statements
 }
	
	### event handling##########
	
	<a href="Javascript:void(0)"onClick="alert"('Hello')>say hello <a><br />, you can have "hello "  as a function too.
	

	}

	\<form action="#" id="sampform">
	
	 <pid="keydata"> Key Data here </p>
	 <input type="submit" value="Submit">
	 <input id='mouseInput' type='text' size=30>
	 
2) Date ops in javascript
let datex=new Date()
document.write(" Hello:" + datex + '\n\r');
datex.setDate(datex.getDate() - 20);
document.write("\n\r Hello2:" + datex);

// First of month
var c = new Date(2017,1,1); // 1 Feb -> 30 Jan
c.setDate(c.getDate() - 2);
console.log(c.toString());

// First of year
var b = new Date(2018,0,1); // 1 Jan -> 30 Dec
b.setDate(b.getDate() - 2);
console.log(b.toString());


3) Closure example with creating 
var addto = function(passed){
 var closevar=3;
var inner = function(inner){
		return passed + inner + closevar; 
	};
return inner;
}
addthree=addto(3);
console.dir(addthree)

Closure example with privacy, see the below example, priviateCounter cannot accessed outside the class other than from public methods

var counter = (function() {
  var privateCounter = 0;
  function changeBy(val) {
    privateCounter += val;
  }
  return {
    increment: function() {
      changeBy(1);
    },
    decrement: function() {
      changeBy(-1);
    },
    value: function() {
      return privateCounter;
    }
  };   
})();

console.log(counter.value());
counter.increment();
counter.increment();
console.log(counter.value()); 
counter.decrement();
console.log(counter.value());
console.log(counter.privateCounter)

4) functional programming
Functional programming favors:
>>Pure functions instead of shared state & side effects
>>Immutability over mutable data
>>Function composition over imperative flow control
>>Lots of generic, reusable utilities that use higher order functions to act on many data types instead of methods that only operate on their colocated data
>>Declarative rather than imperative code (what to do, rather than how to do it) >> means you dont pass data and modify it, instead u use map function to use objects and make a change
>>Expressions over statements
>>Containers & higher order functions over ad-hoc polymorphism

5) Higher order functions
JavaScript has first class functions, which allows us to treat functions as data — assign them to variables, pass them to other functions, return them from functions, etc…

A higher order function is any function which takes a function as an argument, returns a function, or both. Higher order functions are often used to:

Abstract or isolate actions, effects, or async flow control using callback functions, promises, monads, etc…
Create utilities which can act on a wide variety of data types
Partially apply a function to its arguments or create a curried function for the purpose of reuse or function composition
Take a list of functions and return some composition of those input functions

6) What is a Promise?
A promise is an object that may produce a single value some time in future.
So its used to handle http call..
obersvables are cancellable, can handle multiple events
